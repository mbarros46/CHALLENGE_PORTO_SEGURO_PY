# Miguel Barros  RM5556652
# Pedro Valentim RM556826
# Thomas Rodrigues RM558042

import re
import sys
import json
import os
import time
from datetime import datetime
import oracledb
import requests


# utilização da api viacep para buscar o cep do usuário
def buscar_cep(cep):
    url = f"https://viacep.com.br/ws/{cep}/json/"
    response = requests.get(url)
    if response.status_code == 200:
        dados = response.json()
        if 'erro' not in dados:
            return dados
        else:
            print("CEP não encontrado.")
    else:
        print("Erro na requisição.")
    return None

def solicitar_cep():
    while True:
        cep = input("Digite o CEP (com ou sem hífen): ")
        resultado = buscar_cep(cep)
        if resultado:
            print(
                f"Endereço: {resultado['logradouro']}, {resultado['bairro']}, {resultado['localidade']}, {resultado['uf']}")
            return cep

# conexão com banco de dados
def gerar_conexao(user: str, pwd: str):
    """Conecta ao banco de dados Oracle"""
    try:
        conn = oracledb.connect(user="rm556652", password="120206", dsn='oracle.fiap.com.br:1521/ORCL')
        cursor = conn.cursor()
        return conn, cursor
    except Exception as e:
        print("Erro: ", e)
        print("Falha na conexão com o banco de dados")
        return None, None

# criação da tabela
def criar_tabela(conn, cursor):
    """Cria a tabela tb_cadastro_porto no banco de dados se não existir"""
    try:
        cursor.execute('''
        BEGIN
            EXECUTE IMMEDIATE 'CREATE TABLE tb_cadastro_porto (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR2(50) NOT NULL,
                email VARCHAR2(100) NOT NULL,
                cpf VARCHAR2(11) NOT NULL,
                cep VARCHAR2(9) NOT NULL
            )';
        EXCEPTION
            WHEN OTHERS THEN
                IF SQLCODE != -955 THEN
                    RAISE;
                END IF;
        END;
        ''')
        conn.commit()
    except Exception as e:
        print("Erro ao criar tabela: ", e)

def inserir_usuario_bd(conn, cursor, usuario):
    """Insere um novo usuário no banco de dados Oracle"""
    try:
        sql = """
        INSERT INTO tb_cadastro_porto (nome, email, cpf, cep)
        VALUES (:nome, :email, :cpf, :cep)
        """
        cursor.execute(sql, {
            'nome': usuario['nome'],
            'email': usuario['email'],
            'cpf': usuario['cpf'],
            'cep': usuario['cep']
        })
        conn.commit()
    except Exception as e:
        print("Erro ao inserir usuário no banco de dados: ", e)

def atualizar_usuario_bd(conn, cursor, usuario):
    """Atualiza os dados de um usuário no banco de dados Oracle"""
    try:
        sql = """
        UPDATE tb_cadastro_porto
        SET nome = :nome, email = :email, cep = :cep
        WHERE cpf = :cpf
        """
        cursor.execute(sql, usuario)
        conn.commit()
    except Exception as e:
        print("Erro ao atualizar usuário no banco de dados: ", e)

def limpar_tela() -> None:
    os.system("cls" if os.name == 'nt' else "clear")

def saudacao_dia() -> None:
    """Exibe uma saudação de acordo com a hora do dia."""
    hora_atual = datetime.now().hour
    if hora_atual < 12:
        saudacao = "Bom dia"
    elif 12 <= hora_atual < 18:
        saudacao = "Boa tarde"
    else:
        saudacao = "Boa noite"
    print(f"{saudacao}, bem-vindo!")

def estilizacao(palavra: str) -> None:
    """Exibe um texto estilizado com bordas."""
    comprimento = len(palavra)
    linha = '+' + '-' * (comprimento + 2) + '+'
    linha_palavra = f"| {palavra} |"
    print(f"{linha}\n{linha_palavra}\n{linha}")

def style() -> None:
    """Exibe um separador de linha."""
    print("~" * 30)

def mostrar_opcoes(lista: list) -> None:
    """Exibe uma lista de opções."""
    for opcao in lista:
        print(opcao)

def obter_entrada_valida(mensagem: str, opcoes_validas: list) -> str:
    """Obtém uma entrada válida do usuário a partir de uma lista de opções."""
    while True:
        entrada = input(mensagem).strip().lower()
        if entrada in opcoes_validas:
            return entrada
        else:
            print("Opção inválida, tente novamente.")

def validar_nome(nome: str) -> bool:
    # Verifica se o nome contém apenas letras e espaços
    if re.match("^[A-Za-zÀ-ÖØ-öø-ÿ ]+$", nome):
        return True
    else:
        print("Digite um nome válido!")
        return False

def validar_cpf(cpf: str) -> bool:
    """Valida se o CPF contém exatamente 11 dígitos."""
    if not re.match(r'^\d{11}$', cpf):
        print("CPF deve ter 11 dígitos.")
        return False
    return True

def criar_usuario(nome: str, cpf: str, email: str, cep: str) -> dict:
    """Cria um usuário com os dados fornecidos, validando nome, CPF, email e CEP."""
    if not nome or not isinstance(nome, str):
        raise ValueError("Nome inválido. Deve ser uma string não vazia.")
    if not cpf or not isinstance(cpf, str) or len(cpf) != 11:
        raise ValueError("CPF inválido. Deve ser uma string de 11 dígitos.")
    if not email or "@" not in email:
        raise ValueError("Email inválido. Deve conter um '@'.")
    if not cep or not isinstance(cep, str) or len(cep) not in [8, 9]:
        raise ValueError("CEP inválido. Deve ser uma string de 8 ou 9 dígitos.")
    return {"nome": nome, "cpf": cpf, "email": email, "cep": cep}

def cadastro_usuario() -> dict:
    """Realiza o cadastro do usuário, validando os dados e salvando as informações."""
    cadastro_concluido = False
    usuario = {}  # Inicializa um dicionário vazio para armazenar as informações do usuário
    while not cadastro_concluido:
        style()
        n = input('Digite o seu nome (até 50 caracteres): ')[:50].lower()
        style()
        if not validar_nome(n):
            continue
        while True:
            cpf = input('Digite o seu CPF (somente números): ')
            style()
            if validar_cpf(cpf):
                break
            else:
                print('CPF inválido. Por favor, digite corretamente.')
        while True:
            email = input('Digite o seu e-mail: ').lower()
            style()
            if re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email):
                break
            else:
                print('E-mail inválido. Por favor, digite um e-mail válido.')

        # Solicitar o CEP
        cep = solicitar_cep()

        while True:
            print(f'Confira as suas credenciais: nome - {n}, CPF - {cpf}, e-mail - {email}, CEP - {cep}.')
            print('1 - Confirmar\n2 - Corrigir')
            sn = obter_entrada_valida('Selecione a opção: ', ['1', '2'])
            if sn == '1':
                usuario = criar_usuario(n, cpf, email, cep)  # Cria o usuário com o CEP
                salvar_usuario(usuario)  # Salva no arquivo e no banco de dados
                cadastro_concluido = True
                print('Cadastro realizado com sucesso!\n')
                limpar_tela()
                break
            elif sn == '2':
                print('Por favor, digite as informações corretamente novamente!\n')
                break
    return usuario  # Retorna o dicionário do usuário cadastrado

def salvar_usuario(usuario: dict) -> None:
    """Salva os dados do usuário em um arquivo JSON e no banco de dados Oracle."""

    usuarios = carregar_usuarios()  # Carrega os usuários existentes
    usuarios.append(usuario)  # Adiciona o novo usuário
    salvar_usuarios(usuarios)  # Salva todos os usuários no arquivo JSON

    conn, cursor = gerar_conexao('RM556652', '120206')
    if conn and cursor:
        criar_tabela(conn, cursor)  # Comente ou remova esta linha se a tabela já existir
        inserir_usuario_bd(conn, cursor, usuario)
        conn.close()
    else:
        print("Não foi possível conectar ao banco de dados.")

def carregar_usuarios_bd(conn, cursor) -> list:
    """Carrega os dados dos usuários do banco de dados Oracle."""
    try:
        cursor.execute("SELECT nome, email, cpf, cep FROM tb_cadastro_porto")
        rows = cursor.fetchall()
        usuarios = [{'nome': row[0], 'email': row[1], 'cpf': row[2], 'cep': row[3]} for row in rows]
        return usuarios
    except Exception as e:
        print(f"Erro ao carregar usuários do banco de dados: {e}")
        return []

def salvar_usuarios_bd(conn, cursor, usuarios: list) -> None:
    """Salva os dados dos usuários no banco de dados Oracle."""
    try:
        for usuario in usuarios:
            sql = """
            INSERT INTO tb_cadastro_porto (nome, email, cpf, cep)
            VALUES (:nome, :email, :cpf, :cep)
            """
            cursor.execute(sql, {
                'nome': usuario['nome'],
                'email': usuario['email'],
                'cpf': usuario['cpf'],
                'cep': usuario['cep']
            })
        conn.commit()
        print("Usuários salvos com sucesso no banco de dados!")
    except Exception as e:
        print(f"Erro ao salvar usuários no banco de dados: {e}")

def carregar_usuarios() -> list:
    """Carrega os dados dos usuários de um arquivo JSON e do banco de dados Oracle."""
    usuarios = []
    try:
        with open("usuarios.json", "r") as file:
            usuarios = json.load(file) or []  # Garante que retorne uma lista vazia se o arquivo estiver vazio
    except FileNotFoundError:
        print("Arquivo 'usuarios.json' não encontrado. Um novo será criado.")
    except json.JSONDecodeError as e:
        print(f"Erro ao decodificar o JSON: {e}. Verifique o formato do arquivo.")

    conn, cursor = gerar_conexao('RM556652', '120206')
    if conn and cursor:
        usuarios_bd = carregar_usuarios_bd(conn, cursor)
        conn.close()
        usuarios.extend(usuarios_bd)
    else:
        print("Não foi possível conectar ao banco de dados.")

    return usuarios

def salvar_usuarios(usuarios: list) -> None:
    """Salva os dados dos usuários em um arquivo JSON e no banco de dados Oracle."""
    with open("usuarios.json", "w") as file:
        json.dump(usuarios, file, indent=4)

    conn, cursor = gerar_conexao('RM556652', '120206')
    if conn and cursor:
        salvar_usuarios_bd(conn, cursor, usuarios)
        conn.close()
    else:
        print("Não foi possível conectar ao banco de dados.")

def usuario_para_string(usuario):
    return f"Nome: {usuario['nome']}, CPF: {usuario['cpf']}, Email: {usuario['email']}, CEP: {usuario['cep']}"


# def menu

historico = []

def agendar_servico() -> None:
    """Agenda um serviço e solicita uma data válida a partir da data atual."""
    global historico

    servicos = ["Revisão", "Troca de Óleo", "Reparo de Sinistro", "Higienização"]
    mostrar_opcoes([f"{i + 1} - {servico}" for i, servico in enumerate(servicos)])
    escolha = obter_entrada_valida("Escolha o serviço que deseja agendar: ", [str(i + 1) for i in range(len(servicos))])

    while True:
        data_str = input("Digite a data para agendamento (DD/MM/AAAA): ")
        try:
            data = datetime.strptime(data_str, "%d/%m/%Y")
            data_atual = datetime.now()


            if data.date() >= data_atual.date():
                break
            else:
                print("Erro: A data deve ser igual ou posterior à data de hoje.")
        except ValueError:
            print("Data inválida. Por favor, utilize o formato DD/MM/AAAA.")


    servico_escolhido = servicos[int(escolha) - 1]
    print(f"Serviço de {servico_escolhido} agendado para {data.strftime('%d/%m/%Y')}.")


    historico.append(f"{data.strftime('%d/%m/%Y')} - {servico_escolhido}")


def simular_cotacao() -> None:
    """Simula uma cotação de seguro com base no modelo e ano do veículo"""
    modelo = input("Digite o modelo do veículo: ")

    while True:
        try:
            ano = int(input("Digite o ano de fabricação (somente números): "))
            if ano < 1900 or ano > 2024:
                print("Por favor, insira um ano válido entre 1900 e 2024.")
            else:
                break
        except ValueError:
            print("Erro: O ano de fabricação deve ser um número.")


    while True:
        perfil = input("Digite seu perfil (jovem ou experiente): ").lower()
        if perfil in ['jovem', 'experiente']:
            break
        else:
            print("Perfil inválido. Por favor, escolha entre 'jovem' ou 'experiente'.")


    valor = 1500 + (2024 - ano) * 2
    print(f"Cotação para {modelo} ({ano}), Perfil: {perfil} - Valor: R${valor:.2f}")

def suporte_cliente() -> None:
    """Fornece informações de contato para suporte ao cliente"""
    print("Entre em contato com nosso suporte através dos seguintes canais:")
    print("Chat Online: disponível 24 horas no site da Porto Seguro")
    print("Telefone:  (11) 3003 9303 (atendimento 24 horas)")
    print("Email: suporte@portoseguro.com.br")

def historico_agendamentos() -> None:
    """Exibe o histórico de serviços realizados."""
    if historico:
        print("Histórico de Serviços:")
        for item in historico:
            print(item)
    else:
        print("Nenhum serviço agendado até o momento.")


def exibir_tipos_servico() -> None:
    """Exibe informações sobre os tipos de serviço oferecidos"""
    print('Quais tipos de serviço vocês oferecem?\n\n'
          'Oficinas Credenciadas: Nós possuímos uma ampla rede de oficinas credenciadas em todo o país, onde os segurados podem realizar reparos e manutenções em seus veículos com garantia de qualidade e segurança.\n'
          'Assistência 24 Horas: Nós oferecemos serviços de assistência 24 horas, incluindo guincho, socorro mecânico, troca de pneus, chaveiro, entre outros, para garantir que os segurados recebam ajuda imediata em caso de problemas com o veículo.\n'
          'Serviços Adicionais: Além dos serviços básicos de reparo e assistência, nós também oferecemos serviços adicionais, como higienização interna e externa do veículo, polimento, cristalização da pintura, entre outros, para manter o carro em ótimas condições.')

def exibir_pecas() -> None:
    """Informa sobre peças originais e de reposição"""
    print('Vocês trabalham com peças originais ou de reposição?\n\n'
          '-Nós da Porto Seguro trabalhamos com ambos, peças originais e de reposição, dependendo das necessidades e preferências do cliente.\n'
          '-Nós oferecemos opções flexíveis para atender às demandas individuais de cada cliente.')

def informar_danos() -> None:
    """Fornece informações sobre danos ao carro e contato"""
    print('Danos ao carro\n\n'
          '-Caso o veículo segurado sofra danos, tais como colisões ou avarias por outras circunstâncias, solicitamos que entre em contato conosco pelo número (11) 3003 9303.\n'
          '-Se necessário, providenciaremos assistência imediata, inclusive o serviço de guincho, para oferecer suporte adequado às necessidades do cliente.')

def exibir_garantia() -> None:
    """Detalha a garantia oferecida"""
    print('Garantia\n\n'
          '-A Porto Seguro oferece uma garantia de 90 dias para todos os serviços realizados em nossas oficinas credenciadas.\n'
          '-Nossa garantia abrange tanto as peças utilizadas quanto a mão de obra, proporcionando ao cliente total tranquilidade e confiança em nossos serviços.')

def exibir_orcamento() -> None:
    """Informações sobre orçamento"""
    print('Orçamento\n\n'
          '-A Porto Seguro trabalha com uma tabela de valores para a maioria dos serviços oferecidos em nossas oficinas credenciadas.\n'
          '-Para um orçamento personalizado, convidamos o cliente a nos visitar pessoalmente em uma de nossas unidades ou entrar em contato por telefone para agendarmos uma avaliação detalhada.\n'
          '-Nosso objetivo é fornecer o melhor serviço possível, adaptado às necessidades individuais de cada cliente.')

def mostrar_opcoes(opcoes: list[str]) -> None:
    """Exibe as opções de maneira centralizada."""
    for opcao in opcoes:
        print(f"    {opcao}")
    print()


def obter_entrada_valida(mensagem: str, opcoes_validas: list[str]) -> str:
    """Obtém uma entrada válida do usuário, garantindo que seja uma das opções válidas."""
    while True:
        entrada = input(mensagem).strip().lower()
        if entrada in opcoes_validas:
            return entrada
        else:
            print(f"Opção inválida. Por favor, escolha entre: {', '.join(opcoes_validas)}")


def mostrar_menu(lista: list[str]) -> None:
    """Exibe opções de menu com bordas """
    print("\n" + "-" * 40)
    print(" " * 10 + "MENU PRINCIPAL")
    print("-" * 40)
    mostrar_opcoes(lista)
    print("-" * 40)

# DEF APENAS DO MENU CRUD

def inserir_usuario() -> None:
    """Solicita informações do usuário, valida e insere no banco de dados."""
    cadastro_concluido = False
    usuario = {}
    while not cadastro_concluido:
        nome = input('Digite o seu nome (até 50 caracteres): ')[:50].lower()
        if not validar_nome(nome):
            print("Nome inválido. Por favor, digite novamente.")
            continue

        while True:
            cpf = input('Digite o seu CPF (somente números): ')
            if validar_cpf(cpf):
                break
            else:
                print('CPF inválido. Por favor, digite corretamente.')

        while True:
            email = input('Digite o seu e-mail: ').lower()
            if re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email):
                break
            else:
                print('E-mail inválido. Por favor, digite um e-mail válido.')

        cep = solicitar_cep()

        while True:
            print(f'Confira as suas credenciais: nome - {nome}, CPF - {cpf}, e-mail - {email}, CEP - {cep}.')
            print('1 - Confirmar\n2 - Corrigir')
            sn = obter_entrada_valida('Selecione a opção: ', ['1', '2'])
            if sn == '1':
                usuario = criar_usuario(nome, cpf, email, cep)
                cadastro_concluido = True
                print('Cadastro realizado com sucesso!\n')
                break
            elif sn == '2':
                print('Por favor, digite as informações corretamente novamente!\n')
                break

    conn, cursor = gerar_conexao('RM556652', '120206')
    if conn and cursor:
        criar_tabela(conn, cursor)
        inserir_usuario_bd(conn, cursor, usuario)
        conn.close()
    else:
        print("Não foi possível conectar ao banco de dados.")

def consultar_usuario() -> None:
    """Consulta um usuário pelo CPF."""
    usuarios = carregar_usuarios()
    if not usuarios:
        print("Nenhum usuário encontrado.")
        return
    cpf = input("Digite o CPF do usuário que deseja consultar: ")
    for usuario in usuarios:
        if usuario and usuario['cpf'] == cpf:
            dados_cep = buscar_cep(usuario['cep'])
            if dados_cep:
                endereco = f"{dados_cep['logradouro']}, {dados_cep['bairro']}, {dados_cep['localidade']}, {dados_cep['uf']}, CEP: {usuario['cep']}"
                print(f"Nome: {usuario['nome']}, CPF: {usuario['cpf']}, Email: {usuario['email']}, Endereço: {endereco}")
            else:
                print(f"Nome: {usuario['nome']}, CPF: {usuario['cpf']}, Email: {usuario['email']}, CEP: {usuario['cep']}")
            return
    print("Usuário não encontrado.")

def atualizar_dados() -> None:
    try:

        with open('usuarios.json', 'r') as file:
            usuarios = json.load(file)
    except FileNotFoundError:
        print("Erro: O arquivo 'usuarios.json' não foi encontrado.")
        return
    except json.JSONDecodeError:
        print("Erro: Falha ao ler o arquivo 'usuarios.json'. O formato pode estar incorreto.")
        return

    email_atual = input("Digite seu e-mail atual: ").lower()
    usuario_encontrado = next((usuario for usuario in usuarios if usuario['email'] == email_atual), None)

    if not usuario_encontrado:
        print("E-mail não encontrado. Tente novamente.")
        return

    print("O que deseja atualizar?")
    print("1 - E-mail")
    print("2 - Nome")
    print("3 - CPF")
    print("4 - CEP")
    print("5 - Atualizar tudo")
    escolha = input("Digite o número correspondente à sua escolha: ")

    # Atualizar o e-mail
    if escolha in ['1', '5']:
        while True:
            novo_email = input("Digite seu novo e-mail: ").lower()

            # Verificar formato válido do novo e-mail
            if not re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', novo_email):
                print("E-mail inválido. Por favor, digite um e-mail válido.")
                continue

            # Verificar se o novo e-mail já está em uso
            if any(usuario['email'] == novo_email for usuario in usuarios):
                print("Este e-mail já está cadastrado. Por favor, escolha outro.")
            else:
                usuario_encontrado['email'] = novo_email
                break

    # Atualizar o nome
    if escolha in ['2', '5']:
        while True:
            novo_nome = input("Digite seu novo nome: ").strip()
            # Verificar se o nome não contém caracteres especiais
            if re.match(r'^[A-Za-z\s]+$', novo_nome):
                usuario_encontrado['nome'] = novo_nome
                break
            else:
                print("Nome inválido. Por favor, digite apenas letras e espaços.")

    # Atualizar o CPF
    if escolha in ['3', '5']:
        while True:
            novo_cpf = input("Digite seu novo CPF (somente números): ")
            if re.match(r'^\d{11}$', novo_cpf):
                # Verificar se o CPF já está em uso
                if any(usuario['cpf'] == novo_cpf for usuario in usuarios):
                    print("Este CPF já está cadastrado. Por favor, escolha outro.")
                else:
                    usuario_encontrado['cpf'] = novo_cpf
                    break
            else:
                print("CPF inválido. Por favor, digite um CPF com 11 números.")

    # Atualizar o CEP
    if escolha in ['4', '5']:
        novo_cep = solicitar_cep()
        usuario_encontrado['cep'] = novo_cep

    # Salvar as alterações no arquivo JSON
    try:
        with open('usuarios.json', 'w') as file:
            json.dump(usuarios, file, indent=4)
        print("Dados atualizados com sucesso!")

        # Conectar ao banco de dados e atualizar o usuário
        conn, cursor = gerar_conexao('RM556652', '120206')
        if conn and cursor:
            atualizar_usuario_bd(conn, cursor, usuario_encontrado)
            conn.close()
    except IOError:
        print("Erro ao salvar os dados no arquivo 'usuarios.json'.")

def alterar_usuario() -> None:
    """Altera os dados de um usuário pelo CPF."""
    usuarios = carregar_usuarios()
    cpf = input("Digite o CPF do usuário que deseja alterar: ")
    for usuario in usuarios:
        if usuario['cpf'] == cpf:
            print("Dados atuais:", usuario_para_string(usuario))
            novo_email = input("Digite o novo email: ")
            usuario['email'] = novo_email
            salvar_usuarios(usuarios)
            print("Usuário alterado com sucesso!")
            return
    print("Usuário não encontrado.")

def excluir_usuario() -> None:
    """Exclui um usuário pelo CPF."""
    usuarios = carregar_usuarios()
    cpf = input("Digite o CPF do usuário que deseja excluir: ")
    usuarios = [usuario for usuario in usuarios if usuario['cpf'] != cpf]
    salvar_usuarios(usuarios)
    print("Usuário excluído com sucesso!")

# menu CRUD
def menu_edit() -> None:
    """Menu para operações CRUD de usuários"""
    while True:

        lista = [
            "1 - Inserir Usuário",
            "2 - Consultar Usuário",
            "3 - Atualizar Dados Cadastrais",
            "4 - Alterar Usuário",
            "5 - Excluir Usuário",
            "6 - Voltar ao menu principal"
        ]
        mostrar_menu(lista)  # Usando a nova função para exibir o menu
        opcao = obter_entrada_valida('Escolha uma das opções acima: ', [str(i) for i in range(1, 7)])
        limpar_tela()
        match opcao:
            case '1':
                inserir_usuario()
                input("\nPressione a tecla enter para continuar...")
            case '2':
                consultar_usuario()
                input("\nPressione a tecla enter para continuar...")
            case '3':
                atualizar_dados()
                input("\nPressione a tecla enter para continuar...")
            case '4':
                alterar_usuario()
                input("\nPressione a tecla enter para continuar...")
            case '5':
                excluir_usuario()
                input("\nPressione a tecla enter para continuar...")
            case '6':
                print("Voltando ao menu principal...")
                return

        limpar_tela()
        #time.sleep(1)


def menu_principal() -> None:
    """Menu principal da aplicação"""
    while True:
        time.sleep(0.5)
        lista = [
            "1 - Quais tipos de serviço vocês oferecem?",
            "2 - Vocês trabalham com peças originais ou de reposição?",
            "3 - Danos ao carro",
            "4 - Garantia",
            "5 - Orçamento",
            "6 - Agendar serviço",
            "7 - Simular cotação de seguro",
            "8 - Suporte ao cliente",
            "9 - Histórico de agendamentos",
            "10 - dados cadastrais",
            "11 - Sair"
        ]
        mostrar_menu(lista)

        # Obter entrada do usuário
        opcao = obter_entrada_valida('Escolha uma das opções acima: ', [str(i) for i in range(1, 12)])
        limpar_tela()
        # Exibir a informação correspondente à escolha
        match opcao:
            case '1':
                exibir_tipos_servico()
                input("\nPressione a tecla enter para continuar...")
            case '2':
                exibir_pecas()
                input("\nPressione a tecla enter para continuar...")
            case '3':
                informar_danos()
                input("\nPressione a tecla enter para continuar...")
            case '4':
                exibir_garantia()
                input("\nPressione a tecla enter para continuar...")
            case '5':
                exibir_orcamento()
                input("\nPressione a tecla enter para continuar...")
            case '6':
                agendar_servico()
                input("\nPressione a tecla enter para continuar...")
            case '7':
                simular_cotacao()
                input("\nPressione a tecla enter para continuar...")
            case '8':
                suporte_cliente()
                input("\nPressione a tecla enter para continuar...")
            case '9':
                historico_agendamentos()
                input("\nPressione a tecla enter para continuar...")
            case '10':
                menu_edit()
            case '11':
                print("Muito obrigado. Volte sempre!")
                sys.exit()

        limpar_tela()

if __name__ == "__main__":
    saudacao_dia()
    cadastro_usuario()
    menu_principal()